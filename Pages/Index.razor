@page "/"

<h1>Markdown Table Generator</h1>
<div class="row">
    <label for="numRows" class="col s1">#Rows</label>
    <input type="number" min="1" max="100" id="numRows" placeholder="Placeholder" class=" input-field col s3" @bind-value="NumRows"  />
</div>
<div class="row">
    <label for="numCows" class="col s1">#Cols</label>
    <input type="number" min="1" max="100" id="numCols" class=" input-field col s3" @bind-value="NumCols"/>
</div>
<div class="row">

<button class="amber darken-3 btn waves-effect" @onclick="@(e => AddRow(1))">Add row</button>
<button class="amber darken-3 btn waves-effect" @onclick="@(e => AddRow(-1))">Delete row</button>
<button class="blue btn waves-effect" @onclick="@(e => AddCol(1))">Add col</button>
<button class="blue btn waves-effect" @onclick="@(e => AddCol(-1))">Delete col</button>
</div>
<table class="inputTable">
    <tbody>
        @for (int i = 0; i < NumRows; i++) {
            <tr>
                @for (int j = 0; j < NumCols; j++)
                {
                    var realI = i;
                    var realJ = j;
                    <td><input type="text" @bind-value="table[realI, realJ]"/></td>
                }
            </tr>
        }

    </tbody>
</table>

<button class="blue waves-effect waves-light btn" @onclick="handleClick">Generate</button>


<CopyToClipboard>
@Output
</CopyToClipboard>



@code {
    private const int maxRows = 100;
    private const int maxCols = 50;
    private int _numRows = 4;
    private int _numCols = 3;
    public int NumRows
    {
        get
        {
            return _numRows;
        }
        set
        {
            if (value >= maxRows)
            {
                _numRows = maxRows;
            }
            else if (value <= 0)
            {
                _numRows = 0;
            }
            else
            {
                _numRows = value;
            }
        }
    }

    public int NumCols
    {
        get
        {
            return _numCols;
        }
        set
        {
            if (value >= maxCols)
            {
                _numCols = maxCols;
            }
            else if (value <= 0)
            {
                _numCols = 0;
            }
            else
            {
                _numCols = value;
            }
        }
    }
    private string Output { get; set; } = "";

    private string[,] table { get; set; } = new string[1000, 1000];

    private void handleClick()
    {
        Output = generateTable();
    }

    private string GenerateRow(string[] row, int[] maxLengths)
    {
        var paddedRow = new string[NumCols];
        for (int i = 0; i < NumCols; i++)
        {
            int finalLength = maxLengths[i] + 2;
            int len = 0;
            if (row[i] != null)
            {
                len = row[i].Length;
            }
            var tailingSpaces = new String(' ', finalLength - 1 - len);
            paddedRow[i] = " " + row[i] + tailingSpaces;
        }
        return "|" + String.Join("|", paddedRow) + "|\n";
    }
    private string GenerateSecondRow(int[] maxLengths)
    {
        var paddedRow = new string[NumCols];
        for (int i = 0; i < NumCols; i++)
        {
            paddedRow[i] = new String('-', maxLengths[i] + 2);
        }
        return "|" + String.Join("|", paddedRow) + "|\n";
    }
    private int[] GetMaxLengthEachCol()
    {
        var maxLengths = new int[NumCols];
        for (int j = 0; j < NumCols; j++)
        {
            for (int i = 0; i < NumRows; i++)
            {
                int len = 0;
                if (table[i, j] != null)
                {
                    len = table[i, j].Length;
                }
                maxLengths[j] = Math.Max(maxLengths[j], len);
            }
        }
        return maxLengths;
    }
    private string generateTable()
    {
        if (NumRows == 0 || NumCols == 0)
        {
            return "";
        }
        var maxLengths = GetMaxLengthEachCol();

        // First Row
        string tableString = "";
        tableString += GenerateRow(GetRow(table, 0), maxLengths);
        var dashes = new string[NumCols];
        for (int i = 0; i < NumCols; i++)
        {
            dashes[i] = "-";
        }
        // Add second Row
        tableString += GenerateSecondRow(maxLengths);
        // Add remaining rows
        for (int i = 1; i < NumRows; i++)
        {
            tableString += GenerateRow(GetRow(table, i), maxLengths);
        }
        return tableString;
    }

    public T[] GetRow<T>(T[,] matrix, int rowNumber)
    {
        return Enumerable.Range(0, NumCols)
                .Select(x => matrix[rowNumber, x])
                .ToArray();
    }

    private void AddRow(int addend)
    {
        if (NumRows < 1000 && NumRows > 0)
        {
            NumRows += addend;
        }
    }

    private void AddCol(int addend)
    {
        if (NumCols < 1000 && NumCols > 0)
        {
            NumCols += addend;
        }
    }
}
